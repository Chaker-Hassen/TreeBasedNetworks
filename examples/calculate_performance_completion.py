# -*- coding: utf-8 -*-
"""Calculate_performance_completion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1is4h8kohtWA8sBgS9DuT5HGXHfudhi17
"""

import pickle as pkl
import networkx as nx
import random as rd

def get_character(graph,u,v):
    kegg_2_node = dict()
    i_nodes = [graph.nodes[n]['species'] for n in graph.nodes()]
    for n in graph.nodes():
        kegg_2_node[graph.nodes[n]['species']] = n
    x = kegg_2_node[u]
    y = kegg_2_node[v]
    c = graph.edges[(x,y)]['character']
    return(c)

def contingency_table(true_graph,graph):
    t_nodes = [true_graph.nodes[n]['kegg_id'] for n in true_graph.nodes()]
    t_edges = [(true_graph.nodes[u]['kegg_id'],true_graph.nodes[v]['kegg_id']) for u,v in true_graph.edges()]
    i_nodes = [graph.nodes[n]['species'] for n in graph.nodes()]
    i_edges = [(graph.nodes[u]['species'],graph.nodes[v]['species']) for u,v in graph.edges()]

    if (len(t_nodes) != len(i_nodes) or set(t_nodes) != set(i_nodes)):
        raise ValueError("compared graphs must have the same vertex sets")

    tp,fp,fn = 0,0,0

    correct = []

    for u,v in i_edges:
        if (u,v) in t_edges:
            tp +=1
            c = get_character(graph,u,v)
            correct.append((u,v,c))
        else:
            fp +=1
    for u,v in t_edges:
        if (u,v) not in i_edges:
            fn += 1
    tn = (len(i_nodes) * (len(i_nodes)-1) - (tp + fp + fn))

    print("\t HGTs inferred correctly:",correct)

    return tp,tn,fp,fn

def performance(true_graph,graph):
    tp,tn,fp,fn = contingency_table(true_graph,graph)
    accuracy = (tp + tn) / (tp + tn + fp + fn) if tp + tn + fp + fn > 0 else float('nan')
    precision = tp / (tp + fp) if tp + fp > 0 else float('nan')
    recall = tp / (tp + fn) if tp + fn > 0 else float('nan')
    f1 = (precision*recall)/(precision + recall) if precision + recall > 0 else float('nan')

    return (graph.order(), graph.size(),
            tp, tn, fp, fn,
            accuracy, precision, recall,f1)

from google.colab import files

files.upload()

"""**Real-life contex vs Greedy Algorithm**"""

file = open('/content/interphylum_50_HGT.pkl',"rb")
true_HGT = pkl.load(file)
file.close()

file = open('/content/inferred_HGT_algo2.pkl',"rb")
inferred_HGT = pkl.load(file)
file.close()

order,size,tp,tn,fp,fn,accuracy,precision,recall,f1 = performance(true_HGT,inferred_HGT)

print("\n\t\t\t Greedy Algorithm RESULTS:")
print("\t Order :", order)
print("\t Size :", size)
print("\t N. tp :", tp)
print("\t N. tn :",tn)
print("\t N. fp :",fp)
print("\t n. fn :",fn)
print("\t accuracy: ", accuracy)
print("\t precision: ", precision)
print("\t recall: ", recall)
print("\t f1: ", f1)

"""**Real-life contex VS Greedy + Heuristic**"""

file = open('/content/interphylum_50_HGT.pkl',"rb")
true_HGT = pkl.load(file)
file.close()

file = open('/content/inferred_HGT_algo2_heur.pkl',"rb")
inferred_HGT = pkl.load(file)
file.close()

order,size,tp,tn,fp,fn,accuracy,precision,recall,f1 = performance(true_HGT,inferred_HGT)

print("\n\t\t\t Greedy + Heuristic RESULTS:")
print("\t Order :", order)
print("\t Size :", size)
print("\t N. tp :", tp)
print("\t N. tn :",tn)
print("\t N. fp :",fp)
print("\t n. fn :",fn)
print("\t accuracy: ", accuracy)
print("\t precision: ", precision)
print("\t recall: ", recall)
print("\t f1: ", f1)