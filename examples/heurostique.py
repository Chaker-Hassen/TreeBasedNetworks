# -*- coding: utf-8 -*-
"""Heurostique.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0LY2EHT-2s_ISaTlkj2-J9cDK6dgir0
"""

from google.colab import files

"""**- Heurostique**
visant à optimiser notre solution en résolvant le problème du "Minimum Perfect Transfer Completion",  qui consiste à trouver un Réseau Phylogénétique (PTN) pour un ensemble de taxons S avec un nombre minimal de transferts
"""

files.upload() # <================= Veuillez importer le fichier 'output_algo2.pkl'

"""**Importez le résultat de l'Algorithme 2, qui est un Réseau Phylogénétique (PTN), pas optimale.**

=> Ce réseau contient 528 arêtes
"""

import pickle as pkl

# Ouverture du fichier pickle 'output_algo2.pkl' en mode lecture binaire
file1 = open('/content/output_algo2.pkl', 'rb')

# Chargement des données du fichier pickle dans la variable 'G'
G = pkl.load(file1)

# Impression du contenu des données chargées (informations sur notre réseau)
print(G)

pip install asymmetree

files.upload()     # <================= Veuillez importer le fichier 'treebasednetworks.py'

"""**Sélectionner les arêtes qui, si éliminées, permettent au graphe résultant de rester un PTN :**

=> on va obtenir le nouveau réseau plus optimal avec 336 arêtes
"""

from treebasednetworks import *

nbrCaractere=23

tree_builder = TreeBuilder()
# Affichage du graphe G avant l'elimination des transferts
tree_builder.drawGraph(G)

# Définition des attributs pour chaque nœud
labeler = LeafLabeler()
attributes = labeler.set_leaf_attributes(G, nbrCaractere)
print(attributes)

# Appel de la fonction eliminate_transfer_edges
transfer_manager = TransferManager()
G, attributes = transfer_manager.eliminate_transfer_edges(G, attributes, nbrCaractere)

# Affichage du graphe après l'élimination des arêtes "transfer"
print("Graphe après élimination des arêtes 'transfer':")
print(G.edges())

# Sauvegarde du notre TBN G dans un fichier pickle
file3= open('output_Heurostique.pkl','wb')
pkl.dump(G,file3)


print(G)

"""--------------------------------------------------------------------------------
# **inferred_HGT_heurostique**

**- À partir du résultat de l'heurostique, "output_Heurostique," nous allons construire le graphe HGT inféré de l'heurostique "inferred_HGT_algo2_heur" où chaque nœud représente une espèce et chaque arête représente un événement de transfert.**

=> Nous avons identifié la présence de 296 arêtes et 45 nœuds dans le graphe "inferred_HGT_algo2_heur".
"""

transfer_manager = TransferManager()
G, Tr_Heur=transfer_manager.extract_reachable_leaves_graph(species)

tree_builder = TreeBuilder()
tree_builder.drawGraph(Tr_Heur)
print(Tr_Heur)

file3= open('inferred_HGT_algo2_heur.pkl','wb')
pkl.dump(Tr_Heur,file3)