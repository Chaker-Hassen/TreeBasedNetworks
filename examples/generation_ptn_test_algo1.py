# -*- coding: utf-8 -*-
"""Generation_PTN_Test_Algo1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OCCwDygfZN5hmmyqbetU8tOzIuaZegtA
"""

from google.colab import files

files.upload()    # <================= Veuillez importer le fichier 'treebasednetworks.py'

pip install asymmetree

from treebasednetworks import *

def main():
    # Définir le nombre de caractères
    nbrCaractere = 3

    # Appel de la fonction build_graph_from_newick pour Construire l'arbre G à partir de la chaîne au format Newick
    newick_string = "((3,4)2,(6,7)5)1;"
    tree_builder = TreeBuilder()
    G, root_id = tree_builder.build_graph_from_newick(newick_string)

    # Initialisation du l'arbre G
    G = tree_builder.initialize_graph(G, nbrCaractere, initialize_leaves=False)

    # Ajouter des timestamps aux nœuds du G
    timestamp_manager = TimestampManager()
    G = timestamp_manager.add_timestamp(G, root_id)

    # Appel de la fonction add_transfers_to_tree_PTN pour ajouter aléatoirement des branches du type transfert
    transfer_manager = TransferManager()
    G = transfer_manager.add_transfers_to_tree_PTN(G)

    labeler = LeafLabeler()
    # Appel de la fonction label_leaves_for_PTN_solution pour étiqueter les feuilles pour qu'il avoir une solution PTN
    G = labeler.label_leaves_for_PTN_solution(G, nbrCaractere)

    # Affiche les étiquettes des feuilles du graphe
    labeler.display_leaf_labels(G)

    print("\n-------------------------------------")
    attributes = labeler.set_leaf_attributes(G, nbrCaractere)
    print(attributes)
    print("\n-------------------------------------")

    # Liste des caractères à vérifier
    C = [f'c{i+1}' for i in range(nbrCaractere)]

    # Appel de la fonction findLabeling
    tree_networks = TreeBasedNetworks()
    # Appel de la fonction findLabeling pour chercher un étiquetage possible
    l = tree_networks.findLabeling(G, attributes, C)

    print("Valeur de l:", l)

    # Afficher les horodatages
    timestamp_manager.display_timestamps(G)

if __name__ == "__main__":
    main()