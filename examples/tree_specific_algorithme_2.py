# -*- coding: utf-8 -*-
"""Tree_specific_Algorithme_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eSG7XZ05YZWL03X_VutTpZ43zhcv-Hzv
"""

from google.colab import files

files.upload()   # <================= Veuillez importer le fichier 'treebasednetworks.py'

pip install asymmetree

from treebasednetworks import *
import pickle as pkl

def main():
    # Définir le nombre de caractères
    nbrCaractere = 3

    # Chaîne au format Newick représentant l'arbre phylogénétique
    newick_string = "(((4,5)3,((((((13,12)11,14)10,((18,17)16,19)15)9,20)8,((23,24)22,25)21)7,((29,28)27,30)26)6)2)1;"

    tree_builder = TreeBuilder()
    # Construire l'arbre G à partir de la chaîne au format Newick et obtenir l'identifiant de la racine
    G, root_id = tree_builder.build_graph_from_newick(newick_string)

    # Initialisation du l'arbre G
    G = tree_builder.initialize_graph(G, nbrCaractere)

    # Ajouter des timestamps aux nœuds du G
    timestamp_manager = TimestampManager()
    G = timestamp_manager.add_timestamp(G, root_id)

    # Étiquetage des feuilles de l'arbre G avec des valeurs aléatoires
    labeler = LeafLabeler()
    G = labeler.label_tree_leaves(G, nbrCaractere)

    # Définition des attributs pour chaque nœud
    attributes = labeler.set_leaf_attributes(G, nbrCaractere)
    print(attributes)

    # Affichage l'arbre G avec les étiquettes des feuilles
    tree_builder.drawGraph(G)


    # ---------------------- Appeler la fonction TransferAdditionGreedy ----------------------
    # Ajouter des transferts aux nœuds de l'arbre en fonction des attributs des nœuds afin de construire un Tree-Based Network PTN.
    tree_networks = TreeBasedNetworks()
    G, attributes = tree_networks.TransferAdditionGreedy(G, attributes)
    #-----------------------------------------------------------------------------------------


    # Affichage des attributs mis à jour après l'application des transferts
    print(attributes)
    # Affichage du graphe G avec les nouvelles arêtes
    tree_builder.drawGraph(G)

    # Affichage des timestamps des tous les nœuds du graphe
    timestamp_manager.display_timestamps(G)

    # Sauvegarde du graphe G dans un fichier pickle
    file1= open('exemple_algo2.pkl','wb')
    pkl.dump(G,file1)

if __name__ == "__main__":
    main()