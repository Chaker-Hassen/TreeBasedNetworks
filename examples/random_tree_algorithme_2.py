# -*- coding: utf-8 -*-
"""Random_Tree_Algorithme_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xsFKOq9tF9_ePHk6t3dihitvKDOL1qaB
"""

from google.colab import files

files.upload()   # <================= Veuillez importer le fichier 'treebasednetworks.py'

pip install asymmetree

from treebasednetworks import *
import pickle as pkl

def main():
    # Définir le nombre de caractères
    nbrCaractere = 3
    nbrLeaf=7  #       <============= sélectionner le nombre de feuilles pour l'arbre aléatoire G

    tree_builder = TreeBuilder()
    # Utilisation de la fonction "generate_tree_networkX" pour générer un arbre aléatoire à partir d'un nombre souhaité de feuilles
    G ,root_id= tree_builder.generate_tree_networkX(nbrLeaf, nbrCaractere)

    # Ajouter des timestamps aux nœuds du G
    timestamp_manager = TimestampManager()
    G=timestamp_manager.add_timestamp(G,root_id)


    # Étiquetage des feuilles de l'arbre avec des valeurs aléatoires
    labeler = LeafLabeler()
    G = labeler.label_tree_leaves(G, nbrCaractere)

    # Définition des attributs pour chaque nœud
    attributes = labeler.set_leaf_attributes(G, nbrCaractere)

    # Affichage l'arbre G avec les étiquettes des feuilles
    tree_builder.drawGraph(G)
    print(attributes)



    # ---------------------- Appeler la fonction TransferAdditionGreedy ----------------------
    # Ajouter des transferts aux nœuds de l'arbre en fonction des attributs des nœuds afin de construire un Tree-Based Network PTN.
    tree_networks= TreeBasedNetworks()
    G, attributes = tree_networks.TransferAdditionGreedy(G, attributes)
    #-----------------------------------------------------------------------------------------

    # Affichage des attributs mis à jour après l'application des transferts
    print(attributes)
    # Affichage du notre TBN G avec les nouvelles arêtes
    tree_builder.drawGraph(G)


    # Affichage des timestamps des tous les nœuds du graphe
    timestamp_manager.display_timestamps(G)

    # Sauvegarde du graphe G dans un fichier pickle
    file1= open('exemple_algo2.pkl','wb')
    pkl.dump(G,file1)

if __name__ == "__main__":
    main()